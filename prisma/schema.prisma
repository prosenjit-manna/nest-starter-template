// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PrivilegeType {
  CUSTOM
  DEFAULT
  BASE
}

enum PrivilegeName {
  CREATE
  READ
  UPDATE
  DELETE
}

enum PrivilegeGroup {
  POST
  USER
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserType {
  SUPER_ADMIN
  ADMIN
  USER
}

enum userStatus {
  ACTIVE
  INACTIVE
}

enum workspaceStatus {
  ACTIVE
  INACTIVE
}

model Privilege {
  id        String          @id @default(uuid())
  name      PrivilegeName
  group     PrivilegeGroup
  type      PrivilegeType?  @default(BASE)
  roles     RolePrivilege[] @relation("privilegeRelation")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
}

model Role {
  id         String          @id @default(uuid())
  name       RoleName        @default(USER)
  title      String
  privileges RolePrivilege[] @relation("rolePrivelegeRelation")
  users      UserRole[]      @relation("roleUserRelation")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deletedAt  DateTime?
}

model RolePrivilege {
  id          String    @id @default(uuid())
  role        Role      @relation(name: "rolePrivelegeRelation", fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  privilege   Privilege @relation(name: "privilegeRelation", fields: [privilegeId], references: [id], onDelete: Cascade)
  privilegeId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model UserRole {
  id        String    @id @default(uuid())
  user      User      @relation(name: "userRoleRleation", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role      @relation(name: "roleUserRelation", fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  name                String?
  password            String?
  verificationToken   String?
  isVerified          Boolean               @default(false)
  userStatus          userStatus            @default(ACTIVE)
  userType            UserType              @default(USER)
  posts               Post[]
  roles               UserRole[]            @relation(name: "userRoleRleation")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  workspaceMembership WorkspaceMembership[] @relation(name: "userIdMembershipRelation")
  session             Session[]  @relation(name: "userSessionRelation")
}

model Session {
  id     String  @id @default(uuid())
  user   User @relation(name: "userSessionRelation", fields: [userId], references: [id])
  userId String

  ipAddress          String?

  refreshToken       String?
  refreshTokenExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id                  String                @id @default(uuid())
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  workspaceStatus     workspaceStatus       @default(ACTIVE)
  workspaceMembership WorkspaceMembership[] @relation(name: "workspaceIdMembershipRelation")
}

model WorkspaceMembership {
  id          String    @id @default(uuid())
  user        User      @relation(name: "userIdMembershipRelation", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(name: "workspaceIdMembershipRelation", fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String?
  published Boolean?  @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
