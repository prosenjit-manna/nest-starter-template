// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PrivilegeType {
  CUSTOM
  DEFAULT
  BASE
}

enum PrivilegeName {
  CREATE
  READ
  UPDATE
  DELETE
}

enum PrivilegeGroup {
  POST
  USER
}

enum RoleName {
  ADMIN
  USER
}

model Privilege {
  id    String          @id @default(uuid())
  name  PrivilegeName
  group PrivilegeGroup
  type  PrivilegeType?  @default(BASE)
  roles RolePrivilege[] @relation("privilegeRelation")
}

model Role {
  id         String          @id @default(uuid())
  name       RoleName        @default(USER)
  title      String
  privileges RolePrivilege[] @relation("rolePrivelegeRelation")
  users   UserRole[] @relation("roleUserRelation")
}

model RolePrivilege {
  id          String    @id @default(uuid())
  role        Role      @relation(name: "rolePrivelegeRelation", fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  privilege   Privilege @relation(name: "privilegeRelation", fields: [privilegeId], references: [id], onDelete: Cascade)
  privilegeId String
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(name: "userRoleRleation", fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(name: "roleUserRelation", fields: [roleId], references: [id], onDelete: Cascade)
  roleId String
}

model User {
  id       String     @id @default(uuid())
  email    String     @unique
  name     String?
  password String?
  posts    Post[]
  roles    UserRole[] @relation(name: "userRoleRleation")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}
